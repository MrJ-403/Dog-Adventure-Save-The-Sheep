//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Prefabs/UI/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""MainActionMap"",
            ""id"": ""39b08992-2e12-415c-88d8-59b2e3c537cf"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d7e890ff-c15d-407e-8af0-0a938721702b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Value"",
                    ""id"": ""3a5779b3-4d2f-429a-a6b0-476abd8d9979"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Value"",
                    ""id"": ""4f828836-cc9b-4b91-93d8-6c45b39cfc4d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""63cc45b3-2883-437e-90c7-f739aa5953bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""7b99b666-8e01-4891-ae90-784a8b80e8ba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""59bce7d8-d550-4358-92a7-cc21151627fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hide Minimap"",
                    ""type"": ""Button"",
                    ""id"": ""460b9371-75aa-4bdf-9728-b3f0ab1dde3e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseCheat"",
                    ""type"": ""Button"",
                    ""id"": ""6e9b928a-d63a-440a-827b-3c58ac88230c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""a89f51ff-5c3b-42d7-95f6-921c64474fbc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F1"",
                    ""type"": ""Button"",
                    ""id"": ""e802be96-1fc4-4f8c-a293-9c2e320fcb72"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""eefb5cff-f15c-4db4-8fe4-8272c4f94811"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ead9a5e7-79bc-4aab-86e6-7179b4b0da63"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mobile"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f2ec7ae-0acb-4b4c-ae0a-ee2a3df6a458"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca1b6be8-c8d2-42c9-aeb3-556e00ed162d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mobile"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""488686eb-f214-4eb2-915b-f0a8a0048343"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""149bcaba-293c-4e50-9ef7-062763640006"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mobile"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38b3919b-7b48-4ee6-afab-f0d12647838f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab6f2643-3111-46f4-81be-a3dc42378656"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mobile"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""752d85a1-e7c2-48ab-8bcd-1fb576ca408a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84401446-61a3-4780-b69e-6abf4f2017cb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79faa97f-b09b-4be5-a552-8340d8ee543f"",
                    ""path"": ""<Touchscreen>/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69db3031-e745-49f3-9c5c-7fa6642c3f77"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""773c2a2c-729e-4a1d-b8e4-83bf38a9da13"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hide Minimap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c969598e-90e2-4fc1-8f7e-263868a73b74"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MouseCheat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8273070c-9c52-4f92-a303-99afac3c71ef"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b74e207-cab0-410e-ba3d-d86a3d1e55b4"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59470e83-4b7c-4878-bf42-9cb2043095eb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainActionMap
        m_MainActionMap = asset.FindActionMap("MainActionMap", throwIfNotFound: true);
        m_MainActionMap_Jump = m_MainActionMap.FindAction("Jump", throwIfNotFound: true);
        m_MainActionMap_Left = m_MainActionMap.FindAction("Left", throwIfNotFound: true);
        m_MainActionMap_Right = m_MainActionMap.FindAction("Right", throwIfNotFound: true);
        m_MainActionMap_Run = m_MainActionMap.FindAction("Run", throwIfNotFound: true);
        m_MainActionMap_Escape = m_MainActionMap.FindAction("Escape", throwIfNotFound: true);
        m_MainActionMap_Enter = m_MainActionMap.FindAction("Enter", throwIfNotFound: true);
        m_MainActionMap_HideMinimap = m_MainActionMap.FindAction("Hide Minimap", throwIfNotFound: true);
        m_MainActionMap_MouseCheat = m_MainActionMap.FindAction("MouseCheat", throwIfNotFound: true);
        m_MainActionMap_Ctrl = m_MainActionMap.FindAction("Ctrl", throwIfNotFound: true);
        m_MainActionMap_F1 = m_MainActionMap.FindAction("F1", throwIfNotFound: true);
        m_MainActionMap_Interact = m_MainActionMap.FindAction("Interact", throwIfNotFound: true);
    }

    ~@InputManager()
    {
        UnityEngine.Debug.Assert(!m_MainActionMap.enabled, "This will cause a leak and performance issues, InputManager.MainActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainActionMap
    private readonly InputActionMap m_MainActionMap;
    private List<IMainActionMapActions> m_MainActionMapActionsCallbackInterfaces = new List<IMainActionMapActions>();
    private readonly InputAction m_MainActionMap_Jump;
    private readonly InputAction m_MainActionMap_Left;
    private readonly InputAction m_MainActionMap_Right;
    private readonly InputAction m_MainActionMap_Run;
    private readonly InputAction m_MainActionMap_Escape;
    private readonly InputAction m_MainActionMap_Enter;
    private readonly InputAction m_MainActionMap_HideMinimap;
    private readonly InputAction m_MainActionMap_MouseCheat;
    private readonly InputAction m_MainActionMap_Ctrl;
    private readonly InputAction m_MainActionMap_F1;
    private readonly InputAction m_MainActionMap_Interact;
    public struct MainActionMapActions
    {
        private @InputManager m_Wrapper;
        public MainActionMapActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_MainActionMap_Jump;
        public InputAction @Left => m_Wrapper.m_MainActionMap_Left;
        public InputAction @Right => m_Wrapper.m_MainActionMap_Right;
        public InputAction @Run => m_Wrapper.m_MainActionMap_Run;
        public InputAction @Escape => m_Wrapper.m_MainActionMap_Escape;
        public InputAction @Enter => m_Wrapper.m_MainActionMap_Enter;
        public InputAction @HideMinimap => m_Wrapper.m_MainActionMap_HideMinimap;
        public InputAction @MouseCheat => m_Wrapper.m_MainActionMap_MouseCheat;
        public InputAction @Ctrl => m_Wrapper.m_MainActionMap_Ctrl;
        public InputAction @F1 => m_Wrapper.m_MainActionMap_F1;
        public InputAction @Interact => m_Wrapper.m_MainActionMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_MainActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMainActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
            @HideMinimap.started += instance.OnHideMinimap;
            @HideMinimap.performed += instance.OnHideMinimap;
            @HideMinimap.canceled += instance.OnHideMinimap;
            @MouseCheat.started += instance.OnMouseCheat;
            @MouseCheat.performed += instance.OnMouseCheat;
            @MouseCheat.canceled += instance.OnMouseCheat;
            @Ctrl.started += instance.OnCtrl;
            @Ctrl.performed += instance.OnCtrl;
            @Ctrl.canceled += instance.OnCtrl;
            @F1.started += instance.OnF1;
            @F1.performed += instance.OnF1;
            @F1.canceled += instance.OnF1;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IMainActionMapActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
            @HideMinimap.started -= instance.OnHideMinimap;
            @HideMinimap.performed -= instance.OnHideMinimap;
            @HideMinimap.canceled -= instance.OnHideMinimap;
            @MouseCheat.started -= instance.OnMouseCheat;
            @MouseCheat.performed -= instance.OnMouseCheat;
            @MouseCheat.canceled -= instance.OnMouseCheat;
            @Ctrl.started -= instance.OnCtrl;
            @Ctrl.performed -= instance.OnCtrl;
            @Ctrl.canceled -= instance.OnCtrl;
            @F1.started -= instance.OnF1;
            @F1.performed -= instance.OnF1;
            @F1.canceled -= instance.OnF1;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IMainActionMapActions instance)
        {
            if (m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActionMapActions @MainActionMap => new MainActionMapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IMainActionMapActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
        void OnHideMinimap(InputAction.CallbackContext context);
        void OnMouseCheat(InputAction.CallbackContext context);
        void OnCtrl(InputAction.CallbackContext context);
        void OnF1(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
